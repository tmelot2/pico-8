pico-8 cartridge // http://www.pico-8.com
version 41
__lua__

screenwidth = 127
screenheight = 127

MAZE_SIZE=32
TILE_SIZE=4

maze={}
t=0

p={}
anim={}

-- main
function _init()
	t=0
	maze=initmaze()
	p=initplayer()
end

function _update60()	
	t+=1
	input()
	animate()
	updateplayer()
end

function _draw()
	cls(0)

	-- maze
	for ix,x in ipairs(maze) do
		for iy,y in ipairs(x) do
			if y==true then
				sspr(8,0, 4,4, TILE_SIZE*(ix-1),TILE_SIZE*(iy-1))
			end
		end
	end

	-- player
	-- sspr(8,8, 4,4, TILE_SIZE*(p.mx-1),TILE_SIZE*(p.my-1))
	sspr(8,8, 4,4, p.x,p.y)
	adddebug('p.mx '..p.mx)
	adddebug('p.my '..p.my)
	adddebug('p.x '..p.x)
	adddebug('p.y '..p.y)

	drawdebug()
end


-- maze
function initmaze()
	m={}
	for x=1,MAZE_SIZE do
		m[x] = {}
		for y=1,MAZE_SIZE do
			-- ignore perimeter
			if x==1 or x==MAZE_SIZE or y==1 or y==MAZE_SIZE then 
				wall=true 
			-- middle
			else
				wall=false
				if frnd(100)<30 then wall=true end
			end
			m[x][y] = wall
		end
	end
	return m
end


-- player
function initplayer()
	mx=frnd(20)
	my=frnd(20)
	return {
		mx=mx, my=my,
		x=TILE_SIZE*(mx-1),y=TILE_SIZE*(my-1)
	}
end

function updateplayer()
end

function moveplayer(mazex, mazey)
	dur=4
	if getmazewall(mazex,mazey) == false then 
		sx = TILE_SIZE*(p.mx-1)
		sy = TILE_SIZE*(p.my-1)

		p.mx=mazex
		p.my=mazey
		a={
			obj=p, prop='x',
			s=sx, e=TILE_SIZE*(p.mx-1),
			t=0, d=dur
		}
		add(anim,a)
		a={
			obj=p, prop='y',
			s=sy, e=TILE_SIZE*(p.my-1),
			t=0, d=dur
		}
		add(anim,a)
	end
end


-- animation
function animate()
	for a in all(anim) do
		if a.t>=a.d then
			del(anim,a)
		end
		percent = a.t/a.d
		val = a.s + percent*(a.e-a.s)
		a.obj[a.prop] = val

		a.t+=1
	end
end


-- input
function input()
	if btnp(0) then
		moveplayer(p.mx-1, p.my)
	end
	if btnp(1) then
		moveplayer(p.mx+1, p.my)
	end
	if btnp(2) then
		moveplayer(p.mx, p.my-1)
	end
	if btnp(3) then
		moveplayer(p.mx, p.my+1)
	end

	if btn(4) then
		nx = frnd(20+10)+1
		ny = frnd(20+10)+1
		moveplayer(nx,ny)
	end

	if btnp(5) then maze=initmaze() end

	c = maze[p.mx][p.my]
end


-- util
function frnd(x)
	return flr(rnd(x))
end

-- 1 based
function getmazewall(x,y)
	print('getmazewall '..x..' '..y)
	if x<=1 or x>=MAZE_SIZE or y<=1 or y>=MAZE_SIZE then return true end
	return maze[x][y]
end

dbg={}
function drawdebug()
	local i=0
	for i,d in ipairs(dbg) do
		print(d, 1, i*7, 7)
	end
	-- print('fps '..stat(7), 1, i*7, 7)
	dbg={}
end
function adddebug(d)
	dbg[#dbg+1] = d
end

-- percent, start, end (offset from start), ease func
function ease(percent,s,e,f)
	return s + (e)*f(percent)
end

function easequarticout(t)
	return 1 - (1-t)^4
end

__gfx__
00000000222122221221122118810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222122222882299282280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700222122222882299282280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000111011111221122118810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000212222221441133100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700212222224aa43bb300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000212222224aa43bb300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111111441133100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000aaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000abba00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000abba00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000aaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
